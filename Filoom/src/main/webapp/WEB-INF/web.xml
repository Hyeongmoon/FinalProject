<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- 
		* web.xml 파일
		서버 구동과 동시에 제일 먼저 읽혀지는 배포 서술자
		이 웹 사이트에서 필요로 하는 설정값들을 주로 작성한다.
		
		> Spring 의 수많은 설정 xml 파일들 중에 제일 먼저 읽혀짐!!
	-->

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- 
		1. 서버 구동과 동시에 곧바로 읽어낼 
		   Spring 의 최상위 설정 파일의 경로를 적어둔 부분
		- Spring 의 최상위 설정 파일 : root-context.xml 파일
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/spring-security.xml	
		</param-value>
	</context-param>
	
	
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- 
		2. 스프링 프로젝트에서 필요로 하는 
		   자바 객체들을 보관할 수 있는 메모리 공간을 지정하는 설정
		- 스프링에서 자바 객체들을 "Bean" 이라고 부른다.
		- 이 "Bean" 들은 "Spring Container" 라는 메모리 영역에 저장된다.   
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!-- 
		3. 스프링에서 모든 요청을 받아줄 수 있는
		   DispatcherServlet 이라는 클래스를 등록한 부분
		- DispatcherServlet : 스프링 웹 사이트에서 모든 요청은 이 서블릿으로 통한다!!
							  Controller 코드를 줄이는데 가장 큰 역할을 해줌
							  (스프링의 가장 핵심 부품)  
		- init-param 부분은 DispatcherServlet 이 요청을 처리할 때
		  참고할 설정 관련 내용들은 servlet-context.xml 파일에 작성하겠다. 라는 뜻
		- Spring 의 요청 처리와 관련된 설정 파일 : servlet-context.xml
	-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<!-- 
		4. / 로 시작하는 모든 요청을 
		   DispatcherServlet 으로 받아주겠다. 라는 설정
		- http://localhost:8006/spring/* 로 들어오는 모든 요청을
		  DispatcherServlet 이 받아줄 예정!!
	-->
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 
		* Filter (필터)
		요청이 Servlet 으로 넘어가기 전
		공통적으로 필요로 하는 "선처리 해야하는 구문들" 을 가로채서
		먼저 실행해주는 개념
		
		- Filter 는 Servlet 에서 파생된 개념임!!
		  Spring 에서 파생된 개념이 아님!!
		> 스프링 관련 설정 파일이 아닌 전반적인 웹과 관련된 설정파일인
		  web.xml 에다가 필터를 등록해줘야 한다!!
		
		* 스프링에서 필터를 적용하게 되면..
		View -> Filter -> DispatcherServlet -> Controller -> Service -> Dao -> DB
	
		* 스프링에서 제공하는 인코딩 필터를 등록해보자!!
		org.springframework.web.filter.CharacterEncodingFilter
		클래스를 빈 처럼 등록을 해주면 된다!!
	-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- 옵션1 : 인코딩 방식을 UTF-8 로 지정 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- 옵션2 : 혹시나 충돌 시 강제 인코딩도 UTF-8 (선택) -->
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<!-- 위에서 지정한 encodingFilter 를 모든 요청에 적용 -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>
