<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		* root-context.xml 파일
		서버 구동과 동시에 제일 먼저 읽혀지는 web.xml 파일을 거쳐서
		두번째로 로딩되는 (읽혀지는) 설정 문서
		
		주로 Spring 의 핵심 설정들을 적어준다!!
		(Spring 의 최상위 설정 파일이기 때문)
		예) DB 연결 설정, 트랜잭션 처리 관련 설정, 내외부 모듈 연동 관련 설정 등
		
		> 수많은 설정 xml 파일들 중 두번째로 읽혀짐!!
	-->	
	
	<!-- DB 연결 설정 (3단계) -->
	<!-- 
		1. DB 연결 정보 관련 설정 
		- 아무리 MyBatis 프레임워크를 연동해서 쓸 예정이더라도
		  이제는 개발의 메인 주도권이 Spring 한테 있기 때문에
		  중요 정보중 하나인 DB 접속 관련 정보 또한 Spring 한테 알려줘야 함!!	
		  (mybatis-config.xml 파일에 적지 않음)
	-->
	<bean class="org.apache.commons.dbcp2.BasicDataSource" 
		  id="dataSource" destroy-method="close">
		<!-- 어느 DB 에 접속할건지 필드 정보로써 나열 -->
		<property name="driverClassName" 
				  value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="FILOOM" />
		<property name="password" value="FILOOM" />
	</bean>
	
	<!-- 
		DB 접속이 일어날 때마다 위의 설정에 의해
		내부적으로 아래의 코드가 Spring 에 의해 실행된다.
		
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		dataSource.setUsername("SPRING");
		dataSource.setPassword("SPRING");
		
		Spring 에 의해 위의 BasicDataSource 객체가 생성되서
		개발자인 나에게 주어지게 됨!! (IoC 의 예시)
		또한 생성된 BasicDataSource 객체를 다 사용했다면,
		Spring 에 의해 소멸까지 일어나게 됨 (IoC 의 예시, 자동 메모리 관리)
		
		이 때, 객체가 생성될 때 내부적으로 기본생성자 + setter 조합으로 생성되는 경우를
		"setter 주입" 이라고 부른다.
	-->
	
	<!-- 
		2. Spring 에서 MyBatis 를 연동해주는 설정
		2_1. MyBatis Spring 에서 제공하는 SQL 명령문을 실행해주는 객체 관련 설정
		
		- 순수 마이바티스에서는 SQL 명령문 실행 시 SqlSession 객체가 필요했었음!!
		  sqlSession.insert();, sqlSession.selectOne(); 등..
		
		  mybatis-config.xml 을 읽어들인 후
		  SqlSessionFactoryBuilder -> SqlSessionFactory -> SqlSession
		  단계를 거쳐 객체를 직접 생성했었음!!
		
		- 마이바티스를 스프링에 연동해서 쓸 경우에는
		  SQL 명령문 실행 시 SqlSessionTemplate 객체가 필요하다!!
		  (이름이 다르나, 사용법은 거의 동일하고, 스프링 전용으로 개조된 객체임)
		  
		  mybatis-config.xml 을 읽어들인 후
		  SqlSessionFactoryBean -> SqlSessionTemplate
		  단계를 거쳐서 스프링이 객체를 생성해서 줄 것임!!
		  
		> SqlSessionFactoryBean 관련 설정이 2_1 임!!  
	-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		  id="sqlSessionFactory">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- classpath: 은 webapp 폴더 밖의 resources 폴더를 의미함 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 
			setter 주입 시, 참조변수를 필드값을 지정할 경우에는 
			value 속성이 아닌 ref 속성을 써야 함!! (생성자 주입도 마찬가지)
		-->
	</bean>
	

	<!-- 
		위의 설정에 의해 SqlSessionFactoryBean 객체가 필요할 때 마다
		내부적으로 스프링에 의해 아래의 구문이 실행됨
		
		SqlSessionFactoryBean sqlSessionFactory
								= new SqlSessionFactoryBean();
		sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
		sqlSessionFactory.setDataSource(dataSource); // 1단계에서 만들었었던 객체
		
		즉, mybatis-config.xml 파일을 읽은 후
		그 설정 정보를 토대로 일단 SqlSessionFactoryBean 객체를 생성해주겠다.
	-->
	
	<!-- 
		2_2. SQL 구문 실행을 위한 MyBatis Spring 객체 설정
		
		> SqlSessionTemplate 객체를 만들어내는 과정
		  (2_1 에서 만든 SqlSessionFactoryBean 객체를 통해 만든다!!)
	-->



	<bean class="org.mybatis.spring.SqlSessionTemplate"
		  id="sqlSession">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>	
	
	<!-- 
		해당 객체가 필요할 때 마다
		
		SqlSessionTemplate sqlSession 
				= new SqlSessionTemplate(sqlSessionFactory);
										// 2_1 에서 생성된 객체
				
		Spring 에 의해 매개변수 생성자로 객체가 생성되게 됨!! 
		이걸 "생성자 주입" 이라고 한다. (constructor-arg 태그로 셋팅했음)
		
		앞으로는 이 객체를 통해
		sqlSession.insert();
		sqlSession.update();
		sqlSession.delete();
		sqlSession.selectOne();
		sqlSession.selectList();
		위와 같은 CRUD 작업을 DAO 에서 진행하면 된다.
		
		결론 : DB 관련 셋팅을 할 때
			  1단계에서 만들어진 객체 -> 2_1단계 객체 생성
			  2_1단계에서 만들어진 객체 -> 2_2단계 객체 생성
			  (스프링의 DI 특징을 살린 셋팅)
			  
		* 또한 위와 같이 객체 생성과 관련된 설정들을 "빈 등록" 이라고 부른다.
		  그래서 bean 태그를 이용한 것!!
		  > 이렇게 bean 으로 등록된 클래스에 해당하는 객체들이
		    내가 필요할 때마다 Spring 에 의해 객체로 생성되서 주어진다.
		    (내가 생성할 필요 없이 가져다 쓰기만 하면 끝)
	-->
		
	<!-- 트랜잭션 처리 관련 빈 등록 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
		  id="transactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>	
		
	<!-- @Transactional 어노테이션 활성화 -->
	<tx:annotation-driven 
		transaction-manager="transactionManager" />
	
	<!-- 
		파일업로드 관련 빈 등록 
		
		org.springframework.web.multipart.commons.CommonsMultipartResolver
	
		- defaultEncoding 
		: 업로드 되는 파일에 대한 인코딩 설정을 지정하는 부분
		- maxUploadSize
		: 한번에 전체 업로드 되는 파일의 총 용량
		  10Mbyte 단위로 지정할건데..
		  int maxSize = 10 * 1024 * 1024;
		  순수 자바 구문에서는 변수에 계산식만 대입해도
		  알아서 계산 후 변수 값에 담아줬지만,
		  xml 에서는 계산식이 적용 되지 않는다!!
		  직접 계산한 결과를 넣어야 함!!
		  계산결과 : 10485760 -> 대략 : 10000000
		  으로 넣자!!
	-->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		  id="multipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="10000000" />
	</bean>
	
	
	<!-- 이메일 전송 관련 빈 등록 -->
	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" 
		  id="mailSender">
		<!-- gmail 서버를 이용하겠다. -->
		<property name="host" value="smtp.gmail.com" />
		<!-- smtp 는 보통 25 번 포트번호를 씀 -->
		<property name="port" value="25" />
		<property name="username" value="dahoon0823@gmail.com" />
		<!-- 2차 앱 비밀번호 발급받은 것을 공백없이 쓴다. -->
		<property name="password" value="mhecrvetaygmahgr" />
		
		<!-- email 전송 시 필요한 SMTP 규칙에 대한 설정 지정 -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
</beans>
