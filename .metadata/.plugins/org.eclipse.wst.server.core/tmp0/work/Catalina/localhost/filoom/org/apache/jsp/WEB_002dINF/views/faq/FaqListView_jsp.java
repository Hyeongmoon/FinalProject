/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-29 08:57:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.faq;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class FaqListView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>자주 묻는 질문</title>\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("	body{\r\n");
      out.write("        background-color: black;\r\n");
      out.write("    }\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("	    /*전체를 감싸는 영역*/\r\n");
      out.write("	.container {\r\n");
      out.write("	    background-color: #313131;\r\n");
      out.write("	    box-sizing: border-box;\r\n");
      out.write("	    margin : auto;\r\n");
      out.write("	    width : 1900px;\r\n");
      out.write("	    max-width: 1900px;\r\n");
      out.write("	    padding : 20px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*faq*/\r\n");
      out.write("	.faq {\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.faq>a:hover {\r\n");
      out.write("	    color : #E4E0E1;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*자주 묻는 질문 필터링*/\r\n");
      out.write("	.filter-buttons {\r\n");
      out.write("	    border : 2px solid #E4E0E1;\r\n");
      out.write("	    border-radius: 4px;\r\n");
      out.write("	    margin-top: 10px;\r\n");
      out.write("	    display: flex;\r\n");
      out.write("	    justify-content: ceter;\r\n");
      out.write("	    align-items: center;\r\n");
      out.write("	    gap : 20px;\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	    margin-bottom: 10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.filter-button {\r\n");
      out.write("	    border-radius: 4px;\r\n");
      out.write("	    background-color: #E4E0E1;\r\n");
      out.write("	    width : 350px;\r\n");
      out.write("	    height : 150px;\r\n");
      out.write("	    border : none;\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("	    \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.filter-button.active  {\r\n");
      out.write("	    background-color: #AB886D;\r\n");
      out.write("	    \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#all, #theaterUse, #member, #movieReservation, #payTicket {\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	    text-align: center;\r\n");
      out.write("	    font-size: 35px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	    color : #493628;\r\n");
      out.write("	    line-height: 70px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*자주 묻는 질문 FAQ 영역*/\r\n");
      out.write("	.faqArea {\r\n");
      out.write("	    width : 100%;\r\n");
      out.write("	    /*border : 2px solid #E4E0E1;*/\r\n");
      out.write("	    border : none;\r\n");
      out.write("	    border-collapse: collapse;\r\n");
      out.write("	    color : #E4E0E1;\r\n");
      out.write("	    margin-bottom: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	thead th {\r\n");
      out.write("	    background-color: #E4E0E1;\r\n");
      out.write("	    color : #493628;\r\n");
      out.write("	    font-size: 25px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	tbody td {\r\n");
      out.write("	    text-align: left;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.faqArea td:first-child,\r\n");
      out.write("	.faqArea td:last-child {\r\n");
      out.write("	    text-align: center;\r\n");
      out.write("	    vertical-align: middle;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.faq-q {\r\n");
      out.write("	    background-color: #F3F3F3;\r\n");
      out.write("	    color : #493628;\r\n");
      out.write("	    font-size: 23px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	    height : 80px;\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#category {\r\n");
      out.write("	    text-align: center;\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#q {\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#arrow {\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	    text-align: center;\r\n");
      out.write("	    font-size: 30px;\r\n");
      out.write("	    font-weight: bolder;\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.arrow {\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("	    font-size : 20px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.arrow:hover {\r\n");
      out.write("	    color : #AB886D;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.faq-a {\r\n");
      out.write("	    background-color: #E4E0E1;\r\n");
      out.write("	    color : #493628;\r\n");
      out.write("	    font-size: 23px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	    height : 90px;\r\n");
      out.write("	    display: none;\r\n");
      out.write("	    display: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#a {\r\n");
      out.write("	    padding : 10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*페이징영역*/\r\n");
      out.write("	.pagingArea {\r\n");
      out.write("	    display: flex;\r\n");
      out.write("	    justify-content: center;\r\n");
      out.write("	    padding : 20px;\r\n");
      out.write("	    font-size: 20px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	\r\n");
      out.write("	}\r\n");
      out.write("	.pagination {\r\n");
      out.write("	    list-style-type : none;\r\n");
      out.write("	    display: flex;\r\n");
      out.write("	    padding : 0;\r\n");
      out.write("	    margin: 0;\r\n");
      out.write("	    font-size: 20px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	}\r\n");
      out.write("	.pagination>li {\r\n");
      out.write("	    margin : 0 10px; /*리스트 항목 간의 간격*/\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("	    transition: color 0.3s ease; /*색상 전환 효과*/\r\n");
      out.write("	    font-size: 25px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	    color : #F3F3F3;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.pagination>li:hover {\r\n");
      out.write("	    text-decoration-line: none;\r\n");
      out.write("	    color : #AB886D;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.pagination > li.disabled {\r\n");
      out.write("	    color: #AB886D;\r\n");
      out.write("	    pointer-events: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.pagination > li.active {\r\n");
      out.write("	    color: #AB886D;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*li>a:hover, li>a:active {\r\n");
      out.write("	    color : #AB886D;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.page-item.disabled>a {\r\n");
      out.write("	    color : #ccc;\r\n");
      out.write("	} */\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/header.jsp", out, false);
      out.write("\r\n");
      out.write("	\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"faq\">\r\n");
      out.write("            <h2 style=\"color : #E4E0E1;\">자주 묻는 질문</h2>\r\n");
      out.write("            <h3 style=\"color : #E4E0E1; \">더 궁금한 점이 있거나, 이미 문의한 내용과 답변을 확인하려면?</h3>\r\n");
      out.write("            <a href=\"#\"><h4 style=\"text-decoration: underline; color : #AB886D;\">1:1문의 채팅 바로가기</h4></a>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- 자주 묻는 질문 필터링 -->\r\n");
      out.write("        <div class=\"filter-buttons\">\r\n");
      out.write("            <button class=\"filter-button active\" id=\"all\" data-category=\"\">🍿🍿🍿<br>전체</button>\r\n");
      out.write("            <button class=\"filter-button\" id=\"theaterUse\" data-category=\"영화관 이용\">🍿🍿🍿<br>영화관이용</button>\r\n");
      out.write("            <button class=\"filter-button\" id=\"member\" data-category=\"회원\">🍿🍿🍿<br>회원</button>\r\n");
      out.write("            <button class=\"filter-button\" id=\"movieReservation\" data-category=\"영화예매\">🍿🍿🍿<br>영화예매</button>\r\n");
      out.write("            <button class=\"filter-button\" id=\"payTicket\" data-category=\"결제수단/관람권\">🍿🍿🍿<br>결제수단/관람권</button>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- 자주 묻는 질문 FAQ 영역 -->\r\n");
      out.write("        <div style=\"box-sizing: border-box; padding : 10px;\">\r\n");
      out.write("            <table class=\"faqArea\">\r\n");
      out.write("                <thead>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <th style=\"width : 20%; height : 80px;\">구분</th>\r\n");
      out.write("                        <th style=\"width : 70%;\">질문</th>\r\n");
      out.write("                        <th></th>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <tbody id=\"faq-tbody\">\r\n");
      out.write("                    <!-- FAQ 데이터 동적으로 추가 -->\r\n");
      out.write("                    \r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("\r\n");
      out.write("            <!-- 페이징바 -->\r\n");
      out.write("            <div class=\"pagingArea\">\r\n");
      out.write("                <ul class=\"pagination\" id=\"pagination\">\r\n");
      out.write("                    <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">«</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">1</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">4</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">5</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">6</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">7</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">8</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">9</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">10</a></li>\r\n");
      out.write("                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\">»</a></li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // FAQ 데이터 배열\r\n");
      out.write("        const faqData = [\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관 입장 시간은 어떻게 되나요?\", answer: \"영화 시작 15분 전에 입장 가능합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관 내에서 음료나 간식을 먹을 수 있나요?\", answer: \"네, 영화관 내에서는 음료와 간식을 드실 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"어린이와 함께 영화관에 가도 되나요?\", answer: \"어린이와 함께 영화 관람 가능합니다. 단, 연령 제한이 있는 영화는 제외입니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서 장애인 지원 서비스를 제공하나요?\", answer: \"네, 장애인 전용 좌석과 지원 서비스를 제공하고 있습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에 주차 공간이 있나요?\", answer: \"영화관에 주차 공간이 마련되어 있으나, 사전 예약은 불가합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화 시작 전에 영화관에 가면 무엇을 할 수 있나요?\", answer: \"영화 시작 전에 로비에서 음료와 간식을 구입하거나, 영화 예고편을 관람하실 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서 자주 사용하는 멤버십 프로그램은 무엇인가요?\", answer: \"멤버십 프로그램에 가입하시면 할인 혜택을 받을 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서 영화 상영을 취소할 수 있나요?\", answer: \"영화관 내에서는 영화 상영 취소가 불가능합니다. 예매 취소는 온라인을 통해 가능합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관의 좌석은 어떻게 선택하나요?\", answer: \"예매 시 좌석을 선택하실 수 있습니다. 원하는 좌석을 클릭하여 선택해주세요.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서 기차표를 예매할 수 있나요?\", answer: \"영화관에서는 기차표 예매 서비스를 제공하지 않습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관 내에서 모바일 기기를 사용할 수 있나요?\", answer: \"영화 상영 중에는 모바일 기기 사용을 자제해 주세요.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화 상영 시간이 지연될 경우 어떻게 되나요?\", answer: \"상영 시간이 지연되면 안내 메시지가 제공됩니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관 내에서는 어떤 방식으로 결제를 하나요?\", answer: \"현금, 카드, 모바일 결제 등 다양한 결제 방법을 지원합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서 제공하는 추가 서비스가 있나요?\", answer: \"영화관에서는 3D 영화, VIP 좌석, 프리미엄 서비스를 제공하고 있습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관 예약 후 입장하지 않으면 어떻게 되나요?\", answer: \"예약 후 30분 이내 입장하지 않으면 예매가 취소될 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관 내에서 무료 Wi-Fi를 사용할 수 있나요?\", answer: \"네, 영화관에서는 무료 Wi-Fi 서비스를 제공합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에 반려동물을 데려갈 수 있나요?\", answer: \"반려동물은 영화관 내에 데려올 수 없습니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서는 어떤 영화 장르를 상영하나요?\", answer: \"액션, 드라마, 코미디, 애니메이션 등 다양한 장르의 영화를 상영합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서 예약 변경이 가능한가요?\", answer: \"예매한 좌석의 변경은 온라인을 통해 가능합니다.\" },\r\n");
      out.write("            { category: \"영화관 이용\", question: \"영화관에서는 특별 상영을 진행하나요?\", answer: \"네, 특별 상영회나 이벤트 상영이 자주 열립니다.\" },\r\n");
      out.write("\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입은 어떻게 하나요?\", answer: \"회원 가입은 사이트에서 간단한 양식 작성 후 가능합니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 정보를 수정하려면 어떻게 해야 하나요?\", answer: \"마이페이지에서 회원 정보를 수정할 수 있습니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"비밀번호를 잊어버렸어요. 어떻게 해야 하나요?\", answer: \"비밀번호 찾기 메뉴에서 이메일을 입력하면 비밀번호를 재설정할 수 있습니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 탈퇴는 어떻게 하나요?\", answer: \"마이페이지에서 회원 탈퇴를 진행하실 수 있습니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 시 이메일 인증이 필요한가요?\", answer: \"네, 이메일 인증을 통해 가입을 완료할 수 있습니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 시 필요한 정보는 무엇인가요?\", answer: \"이메일, 비밀번호, 이름, 연락처 정보가 필요합니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입을 하지 않으면 예매가 불가능한가요?\", answer: \"예매를 위해 회원 가입은 필수입니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 정보 삭제가 가능한가요?\", answer: \"회원 정보 삭제는 탈퇴 절차를 통해 진행됩니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 탈퇴 후 재가입이 가능한가요?\", answer: \"네, 탈퇴 후 일정 기간이 지나면 재가입이 가능합니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 후 즉시 예매가 가능한가요?\", answer: \"회원 가입 후 바로 예매가 가능합니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 등급이 있나요?\", answer: \"회원 등급은 영화 예매 금액에 따라 자동으로 부여됩니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 정보 변경 시 로그인해야 하나요?\", answer: \"네, 로그인 후 회원 정보 변경이 가능합니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"아이디 변경이 가능한가요?\", answer: \"아이디는 변경할 수 없습니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 후 이메일이 확인되지 않으면 어떻게 해야 하나요?\", answer: \"이메일 확인 메일이 스팸으로 분류될 수 있으니, 스팸함도 확인해 주세요.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 시 개인정보를 어떻게 보호하나요?\", answer: \"모든 개인정보는 안전하게 암호화되어 저장됩니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 후 바로 영화 예매를 해도 되나요?\", answer: \"가입 즉시 영화 예매가 가능합니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 후 영화 예매 내역을 볼 수 있나요?\", answer: \"마이페이지에서 예매 내역을 확인할 수 있습니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 탈퇴 후 예매 기록은 어떻게 되나요?\", answer: \"회원 탈퇴 후 예매 기록은 삭제됩니다.\" },\r\n");
      out.write("            { category: \"회원\", question: \"회원 가입 시 오류가 발생하면 어떻게 해야 하나요?\", answer: \"회원 가입 시 오류가 발생하면 고객센터로 문의해 주세요.\" },\r\n");
      out.write("\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매는 어떻게 하나요?\", answer: \"홈페이지에서 영화를 선택하고 좌석을 선택 후 결제하면 예매가 완료됩니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"예매 가능한 영화는 어디서 확인하나요?\", answer: \"영화 목록에서 예매 가능한 영화를 확인할 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매는 언제부터 가능한가요?\", answer: \"영화 예매는 상영 1개월 전부터 가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 취소는 어떻게 하나요?\", answer: \"마이페이지에서 예매 취소가 가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 시 결제는 어떻게 하나요?\", answer: \"결제는 카드, 모바일 결제, 계좌이체 등 다양한 방법으로 가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 후 좌석을 변경할 수 있나요?\", answer: \"예매 후 좌석 변경은 불가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 후 예매 내역은 어디서 확인하나요?\", answer: \"마이페이지에서 예매 내역을 확인할 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 후 예매 확인서를 받을 수 있나요?\", answer: \"예매 확인서는 이메일로 발송됩니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"예매한 영화의 시간 변경은 어떻게 하나요?\", answer: \"영화 상영 시간 변경은 예매 취소 후 재예매를 진행해야 합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"예매 후 결제를 취소할 수 있나요?\", answer: \"결제 취소는 영화 상영 전에만 가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"예매 후 티켓을 어떻게 받을 수 있나요?\", answer: \"온라인 예매 후 현장에서 티켓을 발권하거나 모바일로 발급 가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"예매한 영화의 상영 시간이 지나면 어떻게 되나요?\", answer: \"상영 시간에 맞춰 입장하지 않으면 예매가 취소됩니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매한 티켓은 다른 사람에게 양도할 수 있나요?\", answer: \"예매한 티켓은 다른 사람에게 양도할 수 없습니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매한 후 환불이 가능한가요?\", answer: \"영화 상영 전까지 환불이 가능합니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 후 환불 절차는 어떻게 되나요?\", answer: \"환불은 마이페이지에서 신청할 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 시 멤버십 할인은 적용되나요?\", answer: \"멤버십 등급에 따라 할인 혜택이 적용됩니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 시 좌석 선택은 어떻게 하나요?\", answer: \"예매 시 상영관과 좌석을 선택할 수 있습니다.\" },\r\n");
      out.write("            { category: \"영화예매\", question: \"영화 예매 후 좌석이 비어 있으면 변경할 수 있나요?\", answer: \"좌석은 예매 후 변경이 불가능합니다.\" },\r\n");
      out.write("\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제는 어떤 방법으로 하나요?\", answer: \"카드, 계좌이체, 휴대폰 결제 등 다양한 방법이 지원됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 수단에 제한이 있나요?\", answer: \"결제 수단에 특별한 제한은 없습니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"온라인 결제 후 티켓은 어떻게 받나요?\", answer: \"온라인 결제 후 티켓은 현장에서 발권하거나 모바일로 확인 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"모바일 결제는 어떻게 하나요?\", answer: \"모바일 결제는 영화 예매 시 결제 화면에서 선택할 수 있습니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"관람권은 어디서 구매할 수 있나요?\", answer: \"관람권은 사이트에서 예매하거나, 영화관 내에서 구매 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"관람권의 유효 기간은 어떻게 되나요?\", answer: \"관람권은 발급일로부터 3개월 이내 사용 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"영화 예매 시 결제 금액은 언제 청구되나요?\", answer: \"결제 금액은 예매 시 즉시 청구됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 시 카드 정보가 안전한가요?\", answer: \"카드 정보는 안전한 결제 시스템을 통해 처리됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"관람권을 환불할 수 있나요?\", answer: \"관람권은 예매 취소 시 환불이 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 수단은 어떻게 변경하나요?\", answer: \"결제 수단 변경은 예매 시 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 영수증은 어떻게 받을 수 있나요?\", answer: \"결제 후 이메일로 영수증이 발송됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"관람권 할인은 어떻게 적용되나요?\", answer: \"할인 혜택은 회원 등급 및 이벤트에 따라 적용됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 후 티켓을 양도할 수 있나요?\", answer: \"티켓은 양도가 불가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 방법에 따라 혜택이 있나요?\", answer: \"결제 수단에 따라 적립 포인트나 할인 혜택이 제공됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"관람권을 여러 개 묶어서 구매할 수 있나요?\", answer: \"관람권은 묶음 구매가 가능하며, 할인 혜택도 제공됩니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"휴대폰 결제는 어떤 방법으로 하나요?\", answer: \"휴대폰 결제는 예매 시 결제 방법으로 선택할 수 있습니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 후 환불이 가능하나요?\", answer: \"영화 상영 전까지 결제 환불이 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"관람권을 환불하려면 어떻게 하나요?\", answer: \"관람권 환불은 예매 취소 절차를 통해 가능합니다.\" },\r\n");
      out.write("            { category: \"결제수단/관람권\", question: \"결제 후 카드 정보를 변경할 수 있나요?\", answer: \"결제 후에는 카드 정보를 변경할 수 없습니다.\" }\r\n");
      out.write("        ];\r\n");
      out.write("\r\n");
      out.write("     	// 페이지 관련 변수\r\n");
      out.write("        let currentPage = 1; // 현재 페이지\r\n");
      out.write("        const itemsPerPage = 10; // 페이지당 항목 수\r\n");
      out.write("        let currentCategory = ''; // 현재 카테고리 (필터 상태)\r\n");
      out.write("\r\n");
      out.write("        // FAQ 동적으로 생성 (필터 + 페이징 적용)\r\n");
      out.write("        function generateFAQ(categoryFilter = '') {\r\n");
      out.write("            const tbody = document.getElementById('faq-tbody');\r\n");
      out.write("            tbody.innerHTML = ''; // 기존 내용 제거\r\n");
      out.write("\r\n");
      out.write("            // 필터링된 데이터 가져오기\r\n");
      out.write("            const filteredData = faqData.filter(item => {\r\n");
      out.write("                return categoryFilter === '' || item.category === categoryFilter;\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 페이징 처리를 위한 데이터 슬라이싱\r\n");
      out.write("            const startIndex = (currentPage - 1) * itemsPerPage;\r\n");
      out.write("            const endIndex = startIndex + itemsPerPage;\r\n");
      out.write("            const paginatedData = filteredData.slice(startIndex, endIndex);\r\n");
      out.write("\r\n");
      out.write("            // 필터링 + 페이징된 데이터 렌더링\r\n");
      out.write("            paginatedData.forEach(faq => {\r\n");
      out.write("                const tr = document.createElement('tr');\r\n");
      out.write("                tr.classList.add(\"faq-q\");\r\n");
      out.write("                tr.setAttribute(\"data-category\", faq.category);\r\n");
      out.write("\r\n");
      out.write("                const categoryCell = document.createElement(\"td\");\r\n");
      out.write("                categoryCell.classList.add(\"category\");\r\n");
      out.write("                categoryCell.textContent = faq.category;\r\n");
      out.write("\r\n");
      out.write("                const questionCell = document.createElement(\"td\");\r\n");
      out.write("                questionCell.classList.add(\"question\");\r\n");
      out.write("                questionCell.textContent = faq.question;\r\n");
      out.write("\r\n");
      out.write("                const arrowCell = document.createElement(\"td\");\r\n");
      out.write("                arrowCell.classList.add(\"arrow\");\r\n");
      out.write("                arrowCell.textContent = \"﹀\";\r\n");
      out.write("\r\n");
      out.write("                // 답변을 보여줄 tr\r\n");
      out.write("                const answerRow = document.createElement(\"tr\");\r\n");
      out.write("                answerRow.classList.add(\"faq-a\");\r\n");
      out.write("                answerRow.setAttribute(\"data-category\", faq.category);\r\n");
      out.write("                answerRow.style.display = \"none\"; // 기본적으로 숨김\r\n");
      out.write("\r\n");
      out.write("                const emptyCell1 = document.createElement(\"td\"); // 첫 번째 빈 셀\r\n");
      out.write("                const answerCell = document.createElement(\"td\");\r\n");
      out.write("                answerCell.classList.add(\"answer\");\r\n");
      out.write("                answerCell.textContent = faq.answer;\r\n");
      out.write("                const emptyCell2 = document.createElement(\"td\"); // 두 번째 빈 셀\r\n");
      out.write("\r\n");
      out.write("                // 각 셀을 answerRow에 추가\r\n");
      out.write("                answerRow.appendChild(emptyCell1);\r\n");
      out.write("                answerRow.appendChild(answerCell);\r\n");
      out.write("                answerRow.appendChild(emptyCell2);\r\n");
      out.write("\r\n");
      out.write("                // questionRow에 td들 추가\r\n");
      out.write("                tr.appendChild(categoryCell);\r\n");
      out.write("                tr.appendChild(questionCell);\r\n");
      out.write("                tr.appendChild(arrowCell);\r\n");
      out.write("\r\n");
      out.write("                // faqTbody 에 questionRow와 answerRow 추가\r\n");
      out.write("                tbody.appendChild(tr);\r\n");
      out.write("                tbody.appendChild(answerRow);\r\n");
      out.write("\r\n");
      out.write("             	// 각 화살표 클릭 시 답변 열기/닫기\r\n");
      out.write("                arrowCell.addEventListener(\"click\", () => {\r\n");
      out.write("                    // 모든 답변 행을 닫고 화살표를 원 상태로 되돌림\r\n");
      out.write("                    const allAnswerRows = document.querySelectorAll(\".faq-a\");\r\n");
      out.write("                    const allArrowCells = document.querySelectorAll(\".arrow\");\r\n");
      out.write("\r\n");
      out.write("                    // 현재 클릭한 답변 행\r\n");
      out.write("                    const isCurrentlyVisible = answerRow.style.display === \"table-row\"; \r\n");
      out.write("\r\n");
      out.write("                    // 다른 모든 답변을 닫음\r\n");
      out.write("                    allAnswerRows.forEach(row => row.style.display = \"none\");\r\n");
      out.write("                    allArrowCells.forEach(cell => (cell.textContent = \"﹀\")); // 화살표 초기화\r\n");
      out.write("\r\n");
      out.write("                    // 현재 클릭한 답변을 열거나 닫음\r\n");
      out.write("                    if (isCurrentlyVisible) {\r\n");
      out.write("                        answerRow.style.display = \"none\";\r\n");
      out.write("                        arrowCell.textContent = \"﹀\";  // 화살표를 내려놓은 상태로 표시\r\n");
      out.write("                    } else {\r\n");
      out.write("                        answerRow.style.display = \"table-row\";  // 답변 열기\r\n");
      out.write("                        arrowCell.textContent = \"︿\";  // 화살표를 위로 표시\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 페이지 버튼 렌더링\r\n");
      out.write("            renderPagination(filteredData.length);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("            // 페이지 버튼 렌더링 시 활성화된 버튼에 직접 스타일 적용\r\n");
      out.write("            function renderPagination(totalItems) {\r\n");
      out.write("                const paginationContainer = document.getElementById('pagination');\r\n");
      out.write("                paginationContainer.innerHTML = ''; // 기존 버튼 초기화\r\n");
      out.write("\r\n");
      out.write("                const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n");
      out.write("\r\n");
      out.write("                // 이전 버튼\r\n");
      out.write("                const prevButton = document.createElement('li');\r\n");
      out.write("                prevButton.textContent = '«';\r\n");
      out.write("                prevButton.classList.add('pagination-button');\r\n");
      out.write("                prevButton.style.cursor = 'pointer'; // 커서 포인터 추가\r\n");
      out.write("                prevButton.disabled = currentPage === 1; // 첫 페이지에서는 비활성화\r\n");
      out.write("                prevButton.addEventListener('click', () => {\r\n");
      out.write("                    if (currentPage > 1) {\r\n");
      out.write("                        currentPage--;\r\n");
      out.write("                        generateFAQ(currentCategory);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                paginationContainer.appendChild(prevButton);\r\n");
      out.write("\r\n");
      out.write("                // 페이지 번호 버튼들\r\n");
      out.write("                for (let i = 1; i <= totalPages; i++) {\r\n");
      out.write("                    const button = document.createElement('li');\r\n");
      out.write("                    button.textContent = i;\r\n");
      out.write("                    button.className = i === currentPage ? 'active' : 'pagination-button';\r\n");
      out.write("                    button.style.cursor = 'pointer'; // 커서 포인터 추가\r\n");
      out.write("                    button.addEventListener('click', () => {\r\n");
      out.write("                        currentPage = i;\r\n");
      out.write("                        generateFAQ(currentCategory);\r\n");
      out.write("                    });\r\n");
      out.write("                    paginationContainer.appendChild(button);\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 다음 버튼\r\n");
      out.write("                const nextButton = document.createElement('li');\r\n");
      out.write("                nextButton.textContent = '»';\r\n");
      out.write("                nextButton.classList.add('pagination-button');\r\n");
      out.write("                nextButton.style.cursor = 'pointer'; // 커서 포인터 추가\r\n");
      out.write("                nextButton.disabled = currentPage === totalPages; // 마지막 페이지에서는 비활성화\r\n");
      out.write("                nextButton.addEventListener('click', () => {\r\n");
      out.write("                    if (currentPage < totalPages) {\r\n");
      out.write("                        currentPage++;\r\n");
      out.write("                        generateFAQ(currentCategory);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                paginationContainer.appendChild(nextButton);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 필터 버튼 상태 변경 함수\r\n");
      out.write("            function setActiveFilterButton(button) {\r\n");
      out.write("                // 모든 버튼의 'active' 클래스 제거\r\n");
      out.write("                const buttons = document.querySelectorAll('.filter-button');\r\n");
      out.write("                buttons.forEach(btn => btn.classList.remove('active'));\r\n");
      out.write("\r\n");
      out.write("                // 클릭된 버튼에 'active' 클래스 추가\r\n");
      out.write("                button.classList.add('active');\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 카테고리 필터 버튼 클릭 이벤트\r\n");
      out.write("            document.querySelectorAll('.filter-button').forEach(button => {\r\n");
      out.write("                button.addEventListener('click', () => {\r\n");
      out.write("                    currentPage = 1; // 필터 변경 시 첫 페이지로 초기화\r\n");
      out.write("                    currentCategory = button.dataset.category || ''; // 필터 카테고리 설정\r\n");
      out.write("                    setActiveFilterButton(button); // 버튼 상태 업데이트\r\n");
      out.write("                    generateFAQ(currentCategory);\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 초기 데이터 로드 (전체 FAQ)\r\n");
      out.write("            generateFAQ();\r\n");
      out.write("            \r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("    <!--Start of Tawk.to Script-->\r\n");
      out.write("   	<script type=\"text/javascript\">\r\n");
      out.write("   		var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();\r\n");
      out.write("   		(function(){\r\n");
      out.write("   		var s1=document.createElement(\"script\"),s0=document.getElementsByTagName(\"script\")[0];\r\n");
      out.write("   		s1.async=true;\r\n");
      out.write("   		s1.src='https://embed.tawk.to/6767f7c649e2fd8dfefbe09c/1ifn1vnud';\r\n");
      out.write("   		s1.charset='UTF-8';\r\n");
      out.write("   		s1.setAttribute('crossorigin','*');\r\n");
      out.write("   		s0.parentNode.insertBefore(s1,s0);\r\n");
      out.write("   		})();\r\n");
      out.write("   	</script>\r\n");
      out.write("   	<!--End of Tawk.to Script-->\r\n");
      out.write("    \r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
