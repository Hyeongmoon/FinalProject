/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2025-02-20 09:20:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.book;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class book_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1734951689000L));
    _jspx_dependants.put("jar:file:/C:/00_FinalProject_Filoom/Filoom/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("    \r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("    \r\n");
      out.write("    <!-- css 구문 -->\r\n");
      out.write("	<link rel = \"stylesheet\" href=\"resources/css/aaa.css\"/>\r\n");
      out.write("    <link rel = \"stylesheet\" href=\"resources/css/cinema_list.css\"/>\r\n");
      out.write("    <link rel = \"stylesheet\" href=\"resources/css/caa.css\"/>\r\n");
      out.write("    \r\n");
      out.write("    <!-- Js구문 -->\r\n");
      out.write("    <script src=\"resources/js/book-calendar.js\"></script>\r\n");
      out.write("    <script src=\"resources/js/book-movie.js\"></script>\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("        #detail_1, #detail_2, #detail_3,#seat_1, #date, #seat_2,#buttonArea_1, #buttonArea_2, #buttonArea_3 {\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("        /* 활성화된 요소만 보이도록 설정 */\r\n");
      out.write("        .active {\r\n");
      out.write("            display: block;\r\n");
      out.write("        }\r\n");
      out.write("        /* 초기 화면 보이기 (첫 단계) */\r\n");
      out.write("        #detail_1, #seat_1, #buttonArea_1 {\r\n");
      out.write("            display: block;\r\n");
      out.write("        }\r\n");
      out.write("        .step {\r\n");
      out.write("            display: flex; /* Flexbox 활성화 */\r\n");
      out.write("            align-items: center; /* 수직 정렬 */\r\n");
      out.write("            justify-content: center; /* 수평 정렬 */\r\n");
      out.write("            width: 120px; /* 단계 박스 너비 */\r\n");
      out.write("            height: 60px; /* 단계 박스 높이 */\r\n");
      out.write("            border-radius: 5px; \r\n");
      out.write("            background-color: #696969;\r\n");
      out.write("            font-size: 16px; /* 텍스트 크기 */\r\n");
      out.write("            text-align: center; /* 텍스트 중앙 정렬 */\r\n");
      out.write("            transition: all 0.3s ease; /* 부드러운 전환 */\r\n");
      out.write("        }\r\n");
      out.write("        .step.active {\r\n");
      out.write("            background-color: #493628; /* 활성화된 단계 배경 */\r\n");
      out.write("            color: #D9D9D9; /* 활성화된 단계 텍스트 색 */\r\n");
      out.write("        }\r\n");
      out.write("        .step.completed {\r\n");
      out.write("            background-color: #999999; /* 완료된 단계 배경 */\r\n");
      out.write("            color: #313131; /* 완료된 단계 텍스트 색 */\r\n");
      out.write("        }\r\n");
      out.write("        .step a {\r\n");
      out.write("            text-decoration: none; /* 밑줄 제거 */\r\n");
      out.write("            color: inherit; /* 부모 색상 따라감 */\r\n");
      out.write("            display: block; /* 중앙 정렬을 위해 block으로 설정 */\r\n");
      out.write("            cursor: default;\r\n");
      out.write("            font-weight : border;\r\n");
      out.write("        }\r\n");
      out.write("        .transition {\r\n");
      out.write("            opacity: 0; /* 투명 상태 */\r\n");
      out.write("            transform: translateX(100%); /* 오른쪽으로 이동 */\r\n");
      out.write("            position: absolute; /* 위치 고정 */\r\n");
      out.write("            width: 100%; /* 화면 너비 */\r\n");
      out.write("            transition: opacity 0.5s ease, transform 0.5s ease; /* 전환 효과 */\r\n");
      out.write("        }\r\n");
      out.write("        /* 활성화 상태 (표시 상태) */\r\n");
      out.write("        .transition.active {\r\n");
      out.write("            opacity: 1; /* 투명하지 않음 */\r\n");
      out.write("            transform: translateX(0); /* 제자리 */\r\n");
      out.write("        }\r\n");
      out.write("        #selection_detail>a>img{\r\n");
      out.write("        	width:20px;\r\n");
      out.write("        	height:20px;\r\n");
      out.write("        }\r\n");
      out.write("        #detailViewButton{\r\n");
      out.write("        	width:100px; \r\n");
      out.write("        	height:40px; \r\n");
      out.write("        	background-color: transparent;\r\n");
      out.write("        	color:#D9D9D9;\r\n");
      out.write("        	font-size : 25px;\r\n");
      out.write("        	font-weight:600;\r\n");
      out.write("        }\r\n");
      out.write("        #detailViewButton>button{\r\n");
      out.write("        	background-color: none;\r\n");
      out.write("        }\r\n");
      out.write("        #searchMovieKeyword{\r\n");
      out.write("        	background-color:#313131;\r\n");
      out.write("        	border:none;\r\n");
      out.write("        	color:white;\r\n");
      out.write("        }\r\n");
      out.write("        #searchMovieKeyword:focus{\r\n");
      out.write("        	border-color: blue;\r\n");
      out.write("		  	outline: none;\r\n");
      out.write("        }\r\n");
      out.write("        #searchButton{\r\n");
      out.write("        	font-size:15px;\r\n");
      out.write("        }\r\n");
      out.write("        #searchButton:hover{\r\n");
      out.write("        	background-color:#151515;\r\n");
      out.write("        	color:white;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<script>\r\n");
      out.write("	    $(document).ready(function () {\r\n");
      out.write("	        // 현재 URL로 초기 상태를 저장\r\n");
      out.write("	        if (!history.state) {\r\n");
      out.write("	            history.replaceState({ step: 1 }, \"\", window.location.href);\r\n");
      out.write("	            console.log(\"초기 상태 설정 완료\");\r\n");
      out.write("	        }\r\n");
      out.write("	\r\n");
      out.write("	        // 다음 버튼 클릭 시 단계 이동 처리\r\n");
      out.write("	        $(\"#nextButton\").on(\"click\", function () {\r\n");
      out.write("	            const currentStep = history.state?.step || 1; // 현재 단계 가져오기\r\n");
      out.write("	            const nextStep = currentStep + 1;\r\n");
      out.write("	\r\n");
      out.write("	            // 히스토리에 새로운 상태 추가\r\n");
      out.write("	            history.pushState({ step: nextStep }, \"\", \"/step\" + nextStep);\r\n");
      out.write("	            console.log(\"현재 단계:\", nextStep);\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 뒤로가기 이벤트 처리\r\n");
      out.write("	        $(window).on(\"popstate\", function (event) {\r\n");
      out.write("	            if (event.originalEvent.state) {\r\n");
      out.write("	                console.log(\"뒤로가기 감지 - 현재 단계:\", event.originalEvent.state.step);\r\n");
      out.write("	            } else {\r\n");
      out.write("	                console.log(\"초기 상태로 돌아왔습니다.\");\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("	    });\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/header.jsp", out, false);
      out.write("	\r\n");
      out.write("\r\n");
      out.write("    <div id = \"third_page\">\r\n");
      out.write("        <!-- 좌석 배치도 들어갈 영역 -->\r\n");
      out.write("        <div id = \"contents\">\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            <div id = \"flow\">\r\n");
      out.write("                <div id = \"movieSelect\" class=\"step active\">\r\n");
      out.write("                    <a>영화 선택</a>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div id = \"dateSelect\" class=\"step\">\r\n");
      out.write("                    <a>날짜 선택</a>\r\n");
      out.write("                </div>\r\n");
      out.write("                   \r\n");
      out.write("                <div id = \"seatSelect\" class=\"step\">\r\n");
      out.write("                    <a>좌석 선택</a>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div style =\"height: 10px;\"></div>\r\n");
      out.write("\r\n");
      out.write("			");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            <div id = \"seat_2\">\r\n");
      out.write("    \r\n");
      out.write("                <div id =\"seat1\">\r\n");
      out.write("                    <div id = \"screen\"></div>\r\n");
      out.write("                    <div id = \"real_seat\">\r\n");
      out.write("                        <div id=\"left_seat\">\r\n");
      out.write("                            <table id=\"left_table\"></table>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div id=\"middle_seat\">\r\n");
      out.write("                            <table id=\"middle_table\"></table>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div id=\"right_seat\">\r\n");
      out.write("                            <table id=\"right_table\" ></table>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div id =\"seat1_blank\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div id = \"date\" style=\"display: none;\"> \r\n");
      out.write("                <div id=\"date_area\"> \r\n");
      out.write("                    <!-- 월 선택 --> \r\n");
      out.write("                    <div id=\"month_area\">\r\n");
      out.write("                        <div onclick=\"previous()\"> < </div>\r\n");
      out.write("                        <div id=\"yearAndMonth\"></div>\r\n");
      out.write("                        <div onclick=\"next()\">  > </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                    <!-- 달력 -->\r\n");
      out.write("                    <div id=\"calendar_area\">\r\n");
      out.write("                        <table id=\"date_table\"> \r\n");
      out.write("                            <thead>\r\n");
      out.write("                                <tr>\r\n");
      out.write("                                    <th>Sun</th>\r\n");
      out.write("                                    <th>Mon</th>\r\n");
      out.write("                                    <th>Tue</th>\r\n");
      out.write("                                    <th>Wed</th>\r\n");
      out.write("                                    <th>Thr</th>\r\n");
      out.write("                                    <th>Fri</th>\r\n");
      out.write("                                    <th>Sat</th>\r\n");
      out.write("                                </tr>\r\n");
      out.write("                            </thead>\r\n");
      out.write("                            <tbody id=\"calendar_body\"></tbody>\r\n");
      out.write("                        </table>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>     \r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("     \r\n");
      out.write("        <!-- 예매 정보 확인 영역 -->\r\n");
      out.write("        <div id = \"contents2\">\r\n");
      out.write("            <div id = \"detail_1\">\r\n");
      out.write("                <div id = \"searchMovie\" style=\"width:500px; height:30px; margin:auto;\" >\r\n");
      out.write("	                <form action=\"movie.sea\" method=\"get\">\r\n");
      out.write("				        <input type=\"text\" id=\"searchMovieKeyword\" autocomplete='off' name=\"searchMovieKeyword\" style=\"width:400px; height:30px; margin:auto; margin-left:10px\">\r\n");
      out.write("				        <button type=\"submit\" id=\"searchButton\" style=\"width:75px; height:30px\">검색</button>\r\n");
      out.write("				    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div id = \"detail_content\">\r\n");
      out.write("                ");
      if (_jspx_meth_c_005fforEach_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("		</div>				\r\n");
      out.write("\r\n");
      out.write("	<!-- 영화 정보 스크립트-->                   \r\n");
      out.write("	<script>	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("		<div id = \"buttonArea_1\">\r\n");
      out.write("\r\n");
      out.write("			<button id = \"booking_1\" class=\"booking-btn\" data-movie-no=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.movieNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">영화 선택</button> <br>\r\n");
      out.write("               \r\n");
      out.write("		</div>\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("	<!-- 달력 스크립트 -->            \r\n");
      out.write("	<script>	</script>\r\n");
      out.write("      \r\n");
      out.write("  		<div id = \"detail_2\">\r\n");
      out.write("              \r\n");
      out.write("            \r\n");
      out.write("			<div id=\"movie_time\">\r\n");
      out.write("			    <div id=\"title_date\">\r\n");
      out.write("			        <span></span> \r\n");
      out.write("			        <span id=\"movie_date\" style=\"font-size:30px\"></span>\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <div id=\"time\"></div>\r\n");
      out.write("		    </div>\r\n");
      out.write("		</div>\r\n");
      out.write("         \r\n");
      out.write("		<div id = \"buttonArea_2\">\r\n");
      out.write("		    <button id = \"booking_2\">시간 선택</button> <br>\r\n");
      out.write("		    <button id = \"past2\" class=\"past\">이전</button>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	<!-- 좌석 상택 -->		\r\n");
      out.write("	<script>\r\n");
      out.write("       	// 임시 예약 상태: 예약된 좌석\r\n");
      out.write("  		const reservedSeats = {\r\n");
      out.write("		// left: [\"L1-1\", \"L2-2\"],\r\n");
      out.write("		// middle: [\"M3-3\", \"M4-5\"],\r\n");
      out.write(" 		    // right: [\"R5-1\"]    		\r\n");
      out.write("  		};\r\n");
      out.write("	\r\n");
      out.write("  		// 좌석 생성 함수\r\n");
      out.write("  		function generateSeats(tableId, rows, cols, prefix, reserved) {\r\n");
      out.write("  		    const table = document.getElementById(tableId);\r\n");
      out.write("  		    for (let i = 1; i <= rows; i++) {\r\n");
      out.write("  		        const row = document.createElement(\"tr\");\r\n");
      out.write("  		        for (let j = 1; j <= cols; j++) {\r\n");
      out.write("  		            const seatId = prefix + i + '-' + j;\r\n");
      out.write("  		            const cell = document.createElement(\"td\");\r\n");
      out.write("  		            const button = document.createElement(\"button\");\r\n");
      out.write("  		            button.textContent = seatId;\r\n");
      out.write("  		            button.dataset.id = seatId;\r\n");
      out.write("  		\r\n");
      out.write("  		            // 예약 상태 적용\r\n");
      out.write("  		            if (reserved.includes(seatId)) {\r\n");
      out.write("  		                button.classList.add(\"reserved\");\r\n");
      out.write("  		                button.disabled = true;\r\n");
      out.write("  		            }\r\n");
      out.write("  		\r\n");
      out.write("  		            // 클릭 이벤트 추가\r\n");
      out.write("  		            button.onclick = function() {\r\n");
      out.write("  		                handleSeatClick(button);\r\n");
      out.write("  		            };\r\n");
      out.write("  		            cell.appendChild(button);\r\n");
      out.write("  		            row.appendChild(cell);\r\n");
      out.write("  		        }\r\n");
      out.write("  		        table.appendChild(row);\r\n");
      out.write("  		    }\r\n");
      out.write("  		}\r\n");
      out.write("  		\r\n");
      out.write("  		function updateReservedSeats(seatData) {\r\n");
      out.write("  		    seatData.forEach(function (seat) {\r\n");
      out.write("  		        const seatNo = seat.seatNo;\r\n");
      out.write("\r\n");
      out.write("  		        // 좌석 번호에 따라 해당 영역에 추가\r\n");
      out.write("  		        if (seatNo.startsWith(\"L\")) {\r\n");
      out.write("  		            if (!reservedSeats.left.includes(seatNo)) {\r\n");
      out.write("  		                reservedSeats.left.push(seatNo);\r\n");
      out.write("  		            }\r\n");
      out.write("  		        } else if (seatNo.startsWith(\"M\")) {\r\n");
      out.write("  		            if (!reservedSeats.middle.includes(seatNo)) {\r\n");
      out.write("  		                reservedSeats.middle.push(seatNo);\r\n");
      out.write("  		            }\r\n");
      out.write("  		        } else if (seatNo.startsWith(\"R\")) {\r\n");
      out.write("  		            if (!reservedSeats.right.includes(seatNo)) {\r\n");
      out.write("  		                reservedSeats.right.push(seatNo);\r\n");
      out.write("  		            }\r\n");
      out.write("  		        }\r\n");
      out.write("  		    });\r\n");
      out.write("\r\n");
      out.write("  		    console.log(\"Updated reservedSeats:\", reservedSeats);\r\n");
      out.write("  		}\r\n");
      out.write("	    		\r\n");
      out.write("   		// 좌석 클릭 이벤트 처리 함수\r\n");
      out.write("   		/*\r\n");
      out.write("   		\r\n");
      out.write("   		\r\n");
      out.write("   		function handleSeatClick(button) {\r\n");
      out.write("   		    const inputField = document.getElementById(\"movieSeat\");\r\n");
      out.write("   		    const seatId = button.dataset.id;\r\n");
      out.write("   		\r\n");
      out.write("   		    if (button.classList.contains(\"selected\")) {\r\n");
      out.write("   		        // 선택 해제\r\n");
      out.write("   		        button.classList.remove(\"selected\");\r\n");
      out.write("   		        inputField.value = inputField.value\r\n");
      out.write("   		            .split(\", \")\r\n");
      out.write("   		            .filter(function(id) {\r\n");
      out.write("   		                return id !== seatId;\r\n");
      out.write("   		            })\r\n");
      out.write("   		            .join(\", \");\r\n");
      out.write("   		    } else {\r\n");
      out.write("   		        // 선택\r\n");
      out.write("   		        button.classList.add(\"selected\");\r\n");
      out.write("   		        inputField.value = inputField.value\r\n");
      out.write("   		            ? inputField.value + \", \" + seatId\r\n");
      out.write("   		            : seatId;\r\n");
      out.write("   		    }\r\n");
      out.write("   		}\r\n");
      out.write("   		*/\r\n");
      out.write("	    		\r\n");
      out.write("   		function handleSeatClick(button) {\r\n");
      out.write("   		    const inputField = document.getElementById(\"movieSeat\");\r\n");
      out.write("   		    const seatId = button.dataset.id;\r\n");
      out.write("   		    \r\n");
      out.write("   		    let selectedValue = $(\"#time input[name='playingNo']:checked\").val();\r\n");
      out.write("   		    \r\n");
      out.write("   		    if (button.classList.contains(\"selected\")) {\r\n");
      out.write("   		        \r\n");
      out.write("   		        button.classList.remove(\"selected\");\r\n");
      out.write("   		        inputField.value = inputField.value\r\n");
      out.write("   		            .split(\", \")\r\n");
      out.write("   		            .filter(function (id) {\r\n");
      out.write("   		                return id !== seatId;\r\n");
      out.write("   		            })\r\n");
      out.write("   		            .join(\", \");\r\n");
      out.write("   		        $.ajax({\r\n");
      out.write("     	                url: \"book.fd\",         \r\n");
      out.write("     	                type: \"GET\",            \r\n");
      out.write("     	                data: { \r\n");
      out.write("     	                	seatId: seatId,\r\n");
      out.write("     	                	playingNo: selectedValue\r\n");
      out.write("     	                \r\n");
      out.write("     	                }, \r\n");
      out.write("     	                success: function (response) {\r\n");
      out.write("     	                	\r\n");
      out.write("     	                	alert(\"좌석 예약을 취소하셨습니다.\");\r\n");
      out.write("     	                	\r\n");
      out.write("     	                },error:{\r\n");
      out.write("     	                	\r\n");
      out.write("     	                },complete:{\r\n");
      out.write("     	              \r\n");
      out.write("     	                }\r\n");
      out.write("     	                \r\n");
      out.write("   		        });\r\n");
      out.write("     	                \r\n");
      out.write("     	                \r\n");
      out.write("   		        \r\n");
      out.write("   		    } else {\r\n");
      out.write("   		        \r\n");
      out.write("   		        button.classList.add(\"selected\");\r\n");
      out.write("   		        inputField.value = inputField.value\r\n");
      out.write("   		            ? inputField.value + \", \" + seatId\r\n");
      out.write("   		            : seatId; \r\n");
      out.write("   	\r\n");
      out.write("   		        $.ajax({\r\n");
      out.write("   		            url: \"book.err\", // 중복 확인 URL\r\n");
      out.write("   		            type: \"GET\",\r\n");
      out.write("   		            data: { seatId: seatId, playingNo: selectedValue },\r\n");
      out.write("   		            success: function (response) {\r\n");
      out.write("   		            	\r\n");
      out.write("   		            	console.log(\"성공시 response\" + response);\r\n");
      out.write("   		            	\r\n");
      out.write("   		                if (response === \"SUCCESS\") {\r\n");
      out.write("   		                   \r\n");
      out.write("   		                	// 중복이 없으면\r\n");
      out.write("   		                    $.ajax({\r\n");
      out.write("   		                        url: \"book.fb\",\r\n");
      out.write("   		                        type: \"GET\",\r\n");
      out.write("   		                        data: { seatId: seatId, playingNo: selectedValue },\r\n");
      out.write("   		                        success: function (response) {\r\n");
      out.write("   		                            \r\n");
      out.write("   		                            console.log(\"좌석 예약 성공:\", response);\r\n");
      out.write("   		                            alert(\"좌석 예약에 성공하셨습니다.\");\r\n");
      out.write("   		                            \r\n");
      out.write("   		                        },\r\n");
      out.write("   		                        error: function (error) {\r\n");
      out.write("   		                            console.error(\"좌석 예약 오류:\", error);\r\n");
      out.write("   		                        },complete: function(){\r\n");
      out.write("   		                        	\r\n");
      out.write("   		                        	console.log(\"book.fb 실행\");	\r\n");
      out.write("   		                        }\r\n");
      out.write("   		                    });\r\n");
      out.write("   		                    \r\n");
      out.write("   		                    \r\n");
      out.write("   		                } else {\r\n");
      out.write("   		                   \r\n");
      out.write("   		                    alert(response); // \"이미 값이 존재합니다! 다른 좌석을 선택해주세요!\"\r\n");
      out.write("   		                    button.classList.remove(\"selected\");\r\n");
      out.write("   		                }\r\n");
      out.write("   		            },\r\n");
      out.write("   		            error: function (error) {\r\n");
      out.write("   		                console.error(\"중복 확인 오류:\", error);\r\n");
      out.write("   		            }\r\n");
      out.write("   		        });\r\n");
      out.write("    		        \r\n");
      out.write("    		        \r\n");
      out.write("   		    }\r\n");
      out.write("\r\n");
      out.write("   		    // inputField의 value 업데이트\r\n");
      out.write("   		    inputField.setAttribute(\"value\", inputField.value);\r\n");
      out.write("   		}\r\n");
      out.write("   		\r\n");
      out.write("\r\n");
      out.write("  		\r\n");
      out.write("  		\r\n");
      out.write("  		function refreshSeats(a) {\r\n");
      out.write("  		    // 좌석 테이블 초기화\r\n");
      out.write("  		    document.getElementById(\"left_table\").innerHTML = \"\";\r\n");
      out.write("  		    document.getElementById(\"middle_table\").innerHTML = \"\";\r\n");
      out.write("  		    document.getElementById(\"right_table\").innerHTML = \"\";\r\n");
      out.write("\r\n");
      out.write("			if(a == 1){	    		    \r\n");
      out.write("	   		    \r\n");
      out.write("	   		    generateSeats(\"left_table\", 5, 2, \"L\", reservedSeats.left);\r\n");
      out.write("	   		    generateSeats(\"middle_table\", 5, 8, \"M\", reservedSeats.middle);\r\n");
      out.write("	   		    generateSeats(\"right_table\", 5, 2, \"R\", reservedSeats.right);\r\n");
      out.write("			\r\n");
      out.write("			}\r\n");
      out.write("			if(a==2){\r\n");
      out.write("			\r\n");
      out.write("	   		    generateSeats(\"left_table\", 4, 2, \"L\", reservedSeats.left);\r\n");
      out.write("	   		    generateSeats(\"middle_table\", 4, 8, \"M\", reservedSeats.middle);\r\n");
      out.write("	   		    generateSeats(\"right_table\", 4, 2, \"R\", reservedSeats.right);\r\n");
      out.write("			\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("        	\r\n");
      out.write("       	$(document).ready(function () {\r\n");
      out.write("       		\r\n");
      out.write("       	    $(\"#booking_2\").click(function () {\r\n");
      out.write("       	        \r\n");
      out.write("       	        let selectedValue = $(\"#time input[name='playingNo']:checked\").val();\r\n");
      out.write("       	     	\r\n");
      out.write("       	        const inputField2 = document.getElementById(\"movieTitle\");\r\n");
      out.write("       	   		const inputField3 = document.getElementById(\"movieDate\");\r\n");
      out.write("       	   		\r\n");
      out.write("       	   		inputField2.setAttribute(\"value\", inputField2.value); \r\n");
      out.write("       	        \r\n");
      out.write("       	   		if (selectedValue) {\r\n");
      out.write("       	            \r\n");
      out.write("       	            $.ajax({\r\n");
      out.write("       	                url: \"book.se\",         \r\n");
      out.write("       	                type: \"GET\",            \r\n");
      out.write("       	                data: { playingNo: selectedValue }, \r\n");
      out.write("       	                success: function (response) {\r\n");
      out.write("       	                   \r\n");
      out.write("       	                	const movieTitle = response[0] && response[0].movieTitle ? response[0].movieTitle : \"제목 없음\";\r\n");
      out.write("       	                    inputField2.value = \"제목 :\" +movieTitle; // input value 설정\r\n");
      out.write("       	                    inputField2.setAttribute(\"value\", movieTitle);\r\n");
      out.write("\r\n");
      out.write("       	                    //formatDateTime(new Date(item.playTime))\r\n");
      out.write("       	                   \r\n");
      out.write("       	                    //console.log(movieTitle);\r\n");
      out.write("        	                    \r\n");
      out.write("       	                    const playTime = response[0] && response[0].playTime ? response[0].playTime : \"00:00:00.0\";\r\n");
      out.write("                             const runtime = response[0] && response[0].runtime ? response[0].runtime : 0;\r\n");
      out.write("\r\n");
      out.write("                             const timePartMonth = playTime.split(\",\")[1].trim(); \r\n");
      out.write("                             const timePartTime = playTime.split(\",\")[2].trim(); \r\n");
      out.write("                             \r\n");
      out.write("                             // console.log(\"플타임 : \" +playTime);\r\n");
      out.write("                             // console.log(\"런타임 : \" + runtime);\r\n");
      out.write("                            	// console.log(\"타임파트1 : \" + timePartMonth);\r\n");
      out.write("                            	// console.log(\"타임파트2 : \" + timePartTime);\r\n");
      out.write("                             \r\n");
      out.write("                            	function convertTo24Hour(time) {\r\n");
      out.write("                            	    const parts = time.split(\" \"); // [\"1:00:00\", \"PM\"]\r\n");
      out.write("                            	    const timePart = parts[0]; // \"1:00:00\"\r\n");
      out.write("                            	    const meridiem = parts[1]; // \"PM\"\r\n");
      out.write("                            	    \r\n");
      out.write("                            	    let timeParts = timePart.split(\":\").map(Number); // [1, 0, 0]\r\n");
      out.write("                            	    let hours = timeParts[0];\r\n");
      out.write("                            	    const minutes = timeParts[1];\r\n");
      out.write("                            	    const seconds = timeParts[2];\r\n");
      out.write("                            	    \r\n");
      out.write("                            	    if (meridiem === \"PM\" && hours !== 12) {\r\n");
      out.write("                            	        hours += 12; // 오후(PM) 처리\r\n");
      out.write("                            	    } else if (meridiem === \"AM\" && hours === 12) {\r\n");
      out.write("                            	        hours = 0; // 자정(AM) 처리\r\n");
      out.write("                            	    }\r\n");
      out.write("                            	    \r\n");
      out.write("                            	    // 두 자리 숫자로 시간, 분, 초 포맷팅\r\n");
      out.write("                            	    const formattedHours = hours < 10 ? \"0\" + hours : hours.toString();\r\n");
      out.write("                            	    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes.toString();\r\n");
      out.write("                            	    const formattedSeconds = seconds < 10 ? \"0\" + seconds : seconds.toString();\r\n");
      out.write("                            	    \r\n");
      out.write("                            	    return formattedHours + \":\" + formattedMinutes + \":\" + formattedSeconds;\r\n");
      out.write("                            	}\r\n");
      out.write("\r\n");
      out.write("                            	// 변환된 시간\r\n");
      out.write("                            	const convertedTime = convertTo24Hour(timePartTime);\r\n");
      out.write("                            	//console.log(\"변환된 시간: \" + convertedTime); // 출력: \"HH:mm:ss\"\r\n");
      out.write("                            	\r\n");
      out.write("                             \r\n");
      out.write("                             const startTime = convertedTime.substring(0, 5); // \"HH:mm\"\r\n");
      out.write("                             const startHours = parseInt(startTime.split(\":\")[0], 10);\r\n");
      out.write("                             const startMinutes = parseInt(startTime.split(\":\")[1], 10);\r\n");
      out.write("                           \r\n");
      out.write("                          //console.log(\"시작시간 : \" +startTime);\r\n");
      out.write("                          //console.log(\"시작시 : \" + startHours);\r\n");
      out.write("                          //console.log(\"시작분 : \" + startMinutes);\r\n");
      out.write("                          \r\n");
      out.write("                          let endHours = startHours;\r\n");
      out.write("                          let endMinutes = startMinutes + runtime;\r\n");
      out.write("\r\n");
      out.write("                          if (endMinutes >= 60) {\r\n");
      out.write("                              endHours += Math.floor(endMinutes / 60);\r\n");
      out.write("                              endMinutes = endMinutes % 60;\r\n");
      out.write("                          }\r\n");
      out.write("                          \r\n");
      out.write("                          //console.log(endHours);\r\n");
      out.write("                          //console.log(endMinutes);\r\n");
      out.write("                          \r\n");
      out.write("                          const endTime = (endHours < 10 ? \"0\" + endHours : endHours) + \":\" + (endMinutes < 10 ? \"0\" + endMinutes : endMinutes);\r\n");
      out.write("\r\n");
      out.write("                          // console.log(\"playTime:\", playTime, \"Type:\", typeof playTime);\r\n");
      out.write("                          \r\n");
      out.write("                          // movieDate 설정 (20xx-xx-xx HH:mm~HH:mm 형식)\r\n");
      out.write("                          const movieDate = playTime.substring(0, 6) + \" \" + startTime + \"~\" + endTime;\r\n");
      out.write("                          inputField3.value = \"시간 : \" + movieDate; \r\n");
      out.write("                          \r\n");
      out.write("                          // console.log(\"무비데이터\" + movieDate);\r\n");
      out.write("                          \r\n");
      out.write("                          inputField3.setAttribute(\"value\", movieDate);\r\n");
      out.write("       	                	\r\n");
      out.write("       	                    // 기존 reservedSeats 배열 초기화\r\n");
      out.write("       	                	reservedSeats.left = [];\r\n");
      out.write("       	                    reservedSeats.middle = [];\r\n");
      out.write("       	                    reservedSeats.right = [];\r\n");
      out.write("\r\n");
      out.write("       	                    if (Array.isArray(response)) {\r\n");
      out.write("       	                        response.forEach(function (seat) {\r\n");
      out.write("       	                          	const seatNo = seat.seatNo;\r\n");
      out.write("\r\n");
      out.write("       	                            if (seatNo) {\r\n");
      out.write("       	                                if (seatNo.startsWith(\"L\")) {\r\n");
      out.write("       	                                    if (!reservedSeats.left.includes(seatNo)) {\r\n");
      out.write("       	                                        reservedSeats.left.push(seatNo);\r\n");
      out.write("       	                                    }\r\n");
      out.write("       	                                } else if (seatNo.startsWith(\"M\")) {\r\n");
      out.write("       	                                    if (!reservedSeats.middle.includes(seatNo)) {\r\n");
      out.write("       	                                        reservedSeats.middle.push(seatNo);\r\n");
      out.write("       	                                    }\r\n");
      out.write("       	                                } else if (seatNo.startsWith(\"R\")) {\r\n");
      out.write("       	                                    if (!reservedSeats.right.includes(seatNo)) {\r\n");
      out.write("       	                                        reservedSeats.right.push(seatNo);\r\n");
      out.write("       	                                    }\r\n");
      out.write("       	                                }\r\n");
      out.write("       	                            }\r\n");
      out.write("       	                        });\r\n");
      out.write("       	                    }\r\n");
      out.write("\r\n");
      out.write("       	                    // 좌석 상태를 새로 렌더링\r\n");
      out.write("       	                    const screenNo = response[0]?.screenNo;\r\n");
      out.write("       	                     if (screenNo === 1) {\r\n");
      out.write("                        refreshSeats(1);\r\n");
      out.write("                  \r\n");
      out.write("       	                     } else if (screenNo === 2) {\r\n");
      out.write("                     \r\n");
      out.write("       	                    	refreshSeats(2);\r\n");
      out.write("                    	 } else {\r\n");
      out.write("                   \r\n");
      out.write("                   	 	console.error(\"Unknown screenNo:\", screenNo);\r\n");
      out.write("                   \r\n");
      out.write("                    	 }  \r\n");
      out.write("       	                     \r\n");
      out.write("       	                   $(\"#movieSeat\").val(\"\"); // movieSeat 초기화\r\n");
      out.write("       	                     \r\n");
      out.write("       	               \r\n");
      out.write("       	                },\r\n");
      out.write("       	                error: function (xhr, status, error) {\r\n");
      out.write("       	                   \r\n");
      out.write("       	                    alert(\"예약 요청 실패: \" + error);\r\n");
      out.write("       	                    window.location.reload();\r\n");
      out.write("       	                \r\n");
      out.write("       	                }\r\n");
      out.write("       	            });\r\n");
      out.write("       	        } else {\r\n");
      out.write("       	            alert(\"시간을 선택해주세요!\");\r\n");
      out.write("       	          	window.location.reload();\r\n");
      out.write("       	        }\r\n");
      out.write("       	    });\r\n");
      out.write("       	});	\r\n");
      out.write("       	\r\n");
      out.write("       	\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("            \r\n");
      out.write("            <div id = \"detail_3\" >\r\n");
      out.write("                \r\n");
      out.write("                <div id = \"detail_content_3\">\r\n");
      out.write("                \r\n");
      out.write("                    <input type =\"text\" id =\"movieTitle\" readonly><br>\r\n");
      out.write("                    <input type =\"text\" id =\"movieDate\" readonly><br>\r\n");
      out.write("                    <input type =\"text\" id =\"movieSeat\" readonly >\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            <div id = \"buttonArea_3\">\r\n");
      out.write("\r\n");
      out.write("                <button id = \"booking_3\" >결제 진행</button> <br>\r\n");
      out.write("                <button id = \"past3\" class=\"past\">이전</button>\r\n");
      out.write("                \r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("			\r\n");
      out.write("\r\n");
      out.write("			<script>\r\n");
      out.write("			    // 공통 AJAX 요청 함수\r\n");
      out.write("			    function sendAjaxForSeat(seatId, playingNo) {\r\n");
      out.write("			        if (seatId && playingNo) {\r\n");
      out.write("			            \r\n");
      out.write("			            $.ajax({\r\n");
      out.write("			                url: \"book.re\", \r\n");
      out.write("			                type: \"POST\", \r\n");
      out.write("			                data: {\r\n");
      out.write("			                    seatId: seatId,\r\n");
      out.write("			                    playingNo: playingNo\r\n");
      out.write("			                },\r\n");
      out.write("			                success: function (response) {\r\n");
      out.write("			                    console.log(\"book.re 호출 성공:\", response);\r\n");
      out.write("			\r\n");
      out.write("			                },\r\n");
      out.write("			                error: function (xhr, status, error) {\r\n");
      out.write("			                    console.error(\"book.re 호출 실패:\", error);\r\n");
      out.write("			                }\r\n");
      out.write("			            });\r\n");
      out.write("			        } else {\r\n");
      out.write("			            console.error(\"seatId 또는 playingNo 값이 유효하지 않습니다.\");\r\n");
      out.write("			        }\r\n");
      out.write("			    }\r\n");
      out.write("			\r\n");
      out.write("			    // #past3 클릭 이벤트 처리\r\n");
      out.write("			    $(\"#past3\").on(\"click\", function (event) {\r\n");
      out.write("			        event.preventDefault(); // 기본 동작 방지\r\n");
      out.write("			        // console.log(\"이전 버튼 클릭\");\r\n");
      out.write("			\r\n");
      out.write("			        const seatId = $(\"#movieSeat\").val();\r\n");
      out.write("			        const playingNo = $(\"#time input[name='playingNo']:checked\").val();\r\n");
      out.write("			\r\n");
      out.write("			        // console.log(\"seatId:\", seatId);\r\n");
      out.write("			        // console.log(\"playingNo:\", playingNo);\r\n");
      out.write("			\r\n");
      out.write("			        sendAjaxForSeat(seatId, playingNo);\r\n");
      out.write("			    });\r\n");
      out.write("			\r\n");
      out.write("			    // 화면 벗어남(페이지 종료 또는 탭 이동) 이벤트 처리\r\n");
      out.write("			    function handlePageExit() {\r\n");
      out.write("			        const seatId = $(\"#movieSeat\").val();\r\n");
      out.write("			        const playingNo = $(\"#time input[name='playingNo']:checked\").val();\r\n");
      out.write("			\r\n");
      out.write("			        // console.log(\"화면 벗어남 - seatId:\", seatId, \"playingNo:\", playingNo);\r\n");
      out.write("			\r\n");
      out.write("			        sendAjaxForSeat(seatId, playingNo);\r\n");
      out.write("			    }\r\n");
      out.write("			\r\n");
      out.write("			    // beforeunload 이벤트\r\n");
      out.write("			    $(window).on(\"beforeunload\", function () {\r\n");
      out.write("			        handlePageExit();\r\n");
      out.write("			    });\r\n");
      out.write("			\r\n");
      out.write("			    // visibilitychange 이벤트    \r\n");
      out.write("			    function handlePageVisibilityChange() {\r\n");
      out.write("			        if (document.visibilityState === \"hidden\") {\r\n");
      out.write("			            handlePageExit();\r\n");
      out.write("			        }\r\n");
      out.write("			    }\r\n");
      out.write("			    document.addEventListener(\"visibilitychange\", handlePageVisibilityChange);\r\n");
      out.write("			    \r\n");
      out.write("			   \r\n");
      out.write("			    \r\n");
      out.write("			    $(document).ready(function () {\r\n");
      out.write("			        $(\"#booking_3\").on(\"click\", function () {\r\n");
      out.write("			        \r\n");
      out.write("			        	console.log(\"클릭\");\r\n");
      out.write("			        	const seatId = $(\"#movieSeat\").val();\r\n");
      out.write("					    const playingNo = $(\"#time input[name='playingNo']:checked\").val();\r\n");
      out.write("			            \r\n");
      out.write("					     \r\n");
      out.write("			            if (!playingNo) {\r\n");
      out.write("			                alert(\"상영 시간을 선택해주세요.\");\r\n");
      out.write("			                return;\r\n");
      out.write("			            }\r\n");
      out.write("			            if (!seatId) {\r\n");
      out.write("			                alert(\"좌석을 입력해주세요.\");\r\n");
      out.write("			                return;\r\n");
      out.write("			            }\r\n");
      out.write("\r\n");
      out.write("			            var seatIds = seatId.split(\",\");\r\n");
      out.write("\r\n");
      out.write("			            \r\n");
      out.write("			            var form = document.createElement(\"form\");\r\n");
      out.write("			            form.method = \"POST\";\r\n");
      out.write("			            form.action = \"/filoom/paymentForm.pm\";\r\n");
      out.write("\r\n");
      out.write("			            // playingNo 값을 추가\r\n");
      out.write("			            var playingNoInput = document.createElement(\"input\");\r\n");
      out.write("			            playingNoInput.type = \"hidden\";\r\n");
      out.write("			            playingNoInput.name = \"playingNo\";\r\n");
      out.write("			            playingNoInput.value = playingNo;\r\n");
      out.write("			            form.appendChild(playingNoInput);\r\n");
      out.write("\r\n");
      out.write("			            // seatIds 값을 추가\r\n");
      out.write("			            seatIds.forEach(function (seat) {\r\n");
      out.write("			                var seatInput = document.createElement(\"input\");\r\n");
      out.write("			                seatInput.type = \"hidden\";\r\n");
      out.write("			                seatInput.name = \"seatNos\"; // 동일한 이름으로 여러 값을 전달\r\n");
      out.write("			                seatInput.value = seat.trim();\r\n");
      out.write("			                form.appendChild(seatInput);\r\n");
      out.write("			            });\r\n");
      out.write("			            \r\n");
      out.write("			            //beforeUlnolad, visibilitychaange 이벤트 제거\r\n");
      out.write("			            $(window).off(\"beforeunload\");\r\n");
      out.write("			            document.removeEventListener(\"visibilitychange\", handlePageVisibilityChange);\r\n");
      out.write("\r\n");
      out.write("			            // 동적으로 생성한 form을 body에 추가하고 제출\r\n");
      out.write("			            document.body.appendChild(form);\r\n");
      out.write("			            form.submit();\r\n");
      out.write("			        });\r\n");
      out.write("			    });\r\n");
      out.write("			    \r\n");
      out.write("			</script>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    let currentStep = 0;\r\n");
      out.write("\r\n");
      out.write("	// 단계별 매핑\r\n");
      out.write("	const steps = [\r\n");
      out.write("	    { detailId: \"detail_1\", seatId: \"seat_1\", buttonAreaId: \"buttonArea_1\", nextButtonId: \"booking_1\" },\r\n");
      out.write("	    { detailId: \"detail_2\", seatId: \"date\", buttonAreaId: \"buttonArea_2\", nextButtonId: \"booking_2\" },\r\n");
      out.write("	    { detailId: \"detail_3\", seatId: \"seat_2\", buttonAreaId: \"buttonArea_3\", nextButtonId: \"booking_3\" },\r\n");
      out.write("	];\r\n");
      out.write("	function updateStepIndicator() {\r\n");
      out.write("	    const steps = [\"movieSelect\", \"dateSelect\", \"seatSelect\"];\r\n");
      out.write("	    steps.forEach((stepId, index) => {\r\n");
      out.write("	        const stepElement = document.getElementById(stepId);\r\n");
      out.write("	        if (index === currentStep) {\r\n");
      out.write("	            stepElement.classList.add(\"active\"); // 현재 단계\r\n");
      out.write("	            stepElement.classList.remove(\"completed\");\r\n");
      out.write("	        } else if (index < currentStep) {\r\n");
      out.write("	            stepElement.classList.add(\"completed\"); // 완료된 단계\r\n");
      out.write("	            stepElement.classList.remove(\"active\");\r\n");
      out.write("	        } else {\r\n");
      out.write("	            stepElement.classList.remove(\"active\", \"completed\"); // 나머지 단계\r\n");
      out.write("	        }\r\n");
      out.write("	    });\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 단계 초기화 시 호출\r\n");
      out.write("	function initializeSteps() {\r\n");
      out.write("	    steps.forEach((step, index) => {\r\n");
      out.write("	        document.getElementById(step.detailId).style.display = index === currentStep ? \"block\" : \"none\";\r\n");
      out.write("	        document.getElementById(step.seatId).style.display = index === currentStep ? \"block\" : \"none\";\r\n");
      out.write("	        document.getElementById(step.buttonAreaId).style.display = index === currentStep ? \"block\" : \"none\";\r\n");
      out.write("	    });\r\n");
      out.write("	    updateStepIndicator();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 이전/다음 버튼 클릭 시 호출\r\n");
      out.write("	steps.forEach((step, index) => {\r\n");
      out.write("	    document.getElementById(step.nextButtonId).addEventListener(\"click\", function () {\r\n");
      out.write("	        if (currentStep < steps.length - 1) {\r\n");
      out.write("	            document.getElementById(steps[currentStep].detailId).style.display = \"none\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].seatId).style.display = \"none\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].buttonAreaId).style.display = \"none\";\r\n");
      out.write("	\r\n");
      out.write("	            currentStep++;\r\n");
      out.write("	            document.getElementById(steps[currentStep].detailId).style.display = \"block\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].seatId).style.display = \"block\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].buttonAreaId).style.display = \"block\";\r\n");
      out.write("	            \r\n");
      out.write("	            updateStepIndicator(); // 단계 업데이트\r\n");
      out.write("	        }\r\n");
      out.write("	    });\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	document.querySelectorAll(\".past\").forEach((btn) => {\r\n");
      out.write("	    btn.addEventListener(\"click\", function () {\r\n");
      out.write("	        if (currentStep > 0) {\r\n");
      out.write("	            document.getElementById(steps[currentStep].detailId).style.display = \"none\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].seatId).style.display = \"none\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].buttonAreaId).style.display = \"none\";\r\n");
      out.write("	\r\n");
      out.write("	            currentStep--;\r\n");
      out.write("	            document.getElementById(steps[currentStep].detailId).style.display = \"block\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].seatId).style.display = \"block\";\r\n");
      out.write("	            document.getElementById(steps[currentStep].buttonAreaId).style.display = \"block\";\r\n");
      out.write("	            \r\n");
      out.write("	            \r\n");
      out.write("	            \r\n");
      out.write("	            updateStepIndicator(); // 단계 업데이트\r\n");
      out.write("	        }\r\n");
      out.write("	    });\r\n");
      out.write("	});\r\n");
      out.write("	/////////////////\r\n");
      out.write("	\r\n");
      out.write("      document.addEventListener(\"DOMContentLoaded\", function () {\r\n");
      out.write("      \r\n");
      out.write("      	const movieSelections = document.querySelectorAll(\"#movie_selection\");\r\n");
      out.write("\r\n");
      out.write("       movieSelections.forEach((selection) => {\r\n");
      out.write("           selection.addEventListener(\"click\", () => {\r\n");
      out.write("              \r\n");
      out.write("               movieSelections.forEach((s) => s.classList.remove(\"selected\"));\r\n");
      out.write("              \r\n");
      out.write("               selection.classList.add(\"selected\");\r\n");
      out.write("               \r\n");
      out.write("           });\r\n");
      out.write("       });\r\n");
      out.write("   });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	   \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/footer.jsp", out, false);
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/book/book.jsp(160,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty requestScope.firstMovie}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("    			<div id=\"seat_1\">\r\n");
          out.write("        		<!-- 메인 이미지 출력 -->\r\n");
          out.write("        			<div id=\"thumbnail_img\">\r\n");
          out.write("         			   ");
          if (_jspx_meth_c_005fforEach_005f0(_jspx_th_c_005fif_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("		    	    </div>\r\n");
          out.write("		\r\n");
          out.write("			        <!-- 영화 상세 정보 출력 -->\r\n");
          out.write("					<div id=\"selectMovie\">\r\n");
          out.write("						<div id=\"selectMovie_detail\">\r\n");
          out.write("							<div id=\"selectMovie_a\">\r\n");
          out.write("			                    <!-- 영화 제목 -->\r\n");
          out.write("			                    <div id=\"selectMovie_title\">\r\n");
          out.write("			                        <a>");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.firstMovie[0].movieTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</a>\r\n");
          out.write("			                        <div style=\"float:right;\">\r\n");
          out.write("			                        	<button id=\"detailViewButton\" onClick=\"location.href='detail.mo?movieNo=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.firstMovie[0].movieNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("'\">\r\n");
          out.write("			                        		상세보기\r\n");
          out.write("			                        	</button>\r\n");
          out.write("			                        </div>\r\n");
          out.write("			                    </div>\r\n");
          out.write("			                    <br>\r\n");
          out.write("								<!-- 영화 설명 -->\r\n");
          out.write("								<div id=\"selectMovie_summary\">\r\n");
          out.write("			                        <a>");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.firstMovie[0].description}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</a>\r\n");
          out.write("			                    </div>\r\n");
          out.write("								<input type=\"hidden\" name=\"movieDetailNo\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.firstMovie[0].movieNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\">\r\n");
          out.write("							</div>\r\n");
          out.write("						</div>\r\n");
          out.write("		\r\n");
          out.write("		            <!-- 서브 이미지 출력 -->\r\n");
          out.write("		            	<div id=\"selectMovie_subImg\">\r\n");
          out.write("			                ");
          if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fif_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("			            </div>\r\n");
          out.write("					</div>\r\n");
          out.write("				</div>\r\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f0);
      // /WEB-INF/views/book/book.jsp(164,15) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("movie");
      // /WEB-INF/views/book/book.jsp(164,15) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/book/book.jsp(164,15) '${requestScope.firstMovie}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${requestScope.firstMovie}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("			                ");
            if (_jspx_meth_c_005fif_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\r\n");
            out.write("					    ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/views/book/book.jsp(165,19) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${movie.fileLevel == 1}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("			                    <img src=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/resources/images/posters/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${movie.fileCodename}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" alt=\"메인 이미지\">\r\n");
          out.write("			                ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f0);
      // /WEB-INF/views/book/book.jsp(195,19) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("movie");
      // /WEB-INF/views/book/book.jsp(195,19) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/book/book.jsp(195,19) '${requestScope.firstMovie}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${requestScope.firstMovie}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("			                    ");
            if (_jspx_meth_c_005fif_005f2(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("\r\n");
            out.write("			                ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f2_reused = false;
    try {
      _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/views/book/book.jsp(196,23) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${movie.fileLevel == 2}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
      if (_jspx_eval_c_005fif_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("			                        <div class=\"subImg\">\r\n");
          out.write("			                            <img src=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/resources/images/posters/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${movie.fileCodename}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" alt=\"서브 이미지\">\r\n");
          out.write("			                        </div>\r\n");
          out.write("			                    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f2);
      _jspx_th_c_005fif_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f2 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f2_reused = false;
    try {
      _jspx_th_c_005fforEach_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f2.setParent(null);
      // /WEB-INF/views/book/book.jsp(265,16) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setVar("b");
      // /WEB-INF/views/book/book.jsp(265,16) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/book/book.jsp(265,16) '${ requestScope.list }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${ requestScope.list }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f2 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f2 = _jspx_th_c_005fforEach_005f2.doStartTag();
        if (_jspx_eval_c_005fforEach_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("				    <div id=\"movie_selection_");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.movieNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" class=\"movie_selection\" data-movie-no=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.movieNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("			            <input type=\"hidden\" name=\"movieNo\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.movieNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("			            <div id=\"selection_img\">\r\n");
            out.write("			                <img src=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/resources/images/posters/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.fileCodename}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" alt=\"메인이미지\">\r\n");
            out.write("			            </div>\r\n");
            out.write("			            <div id=\"selection_detail\">\r\n");
            out.write("			            	<br>\r\n");
            out.write("			                <a><img src=\"resources/images/posters/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.filmRate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(".svg\"></a>\r\n");
            out.write("			                <a>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.movieTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("<a><br>\r\n");
            out.write("			                <a>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.openDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(" 개봉</a><br>\r\n");
            out.write("			                <a>러닝타임 : ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.runtime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(" 분</a>\r\n");
            out.write("			            </div>\r\n");
            out.write("				   </div>\r\n");
            out.write("				");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f2.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f2[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f2.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f2.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f2);
      _jspx_th_c_005fforEach_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f2_reused);
    }
    return false;
  }
}
